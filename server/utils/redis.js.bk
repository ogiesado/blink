import redis from 'redis';
import { promisify } from 'util';
import env from './env';

/**
 * The redis client
 * @type {RedisClient}
 */
let client = null;

/**
 * Connects (if not connected) and returns the redis client
 * @param {Object} options Options for the redis client
 * @return {Promise} A promise that resolve with RedisClient
 */
export async function connectToRedis({
    host = env('REDIS_HOST'),
    port = env('REDIS_PORT'),
    ...rest
} = {}) {

    if (client !== null) {
        return Promise.resolve(client);
    }

    const options = {
        host,
        port,
        retry_strategy (options) {
            if (options.error && options.error.code === 'ECONNREFUSED') {
                return new Error('The redis server refused the connection');
            }

            if (options.total_retry_time > 1000 * 60 * 60) {
                return new Error('Redis connection retry time exhausted');
            }

            if (options.attempt > 10) {
                // End reconnecting with built in error
                return undefined;
            }

            // reconnect after
            return Math.min(options.attempt * 100, 3000);
        },
        ...rest,
    }

    return new Promise((resolve, reject) => {
        try {
            client = redis.createClient({host, port});
            resolve(client);
        } catch (error) {
            reject(error);
        }
    });
}

/**
 * Returns the redis client
 * @return {RedisCient} The redis client
 * @throws {Error} If the redis client is not connected
 */
export function getRedisClient() {
    if (client === null) {
        throw new Error('Redis is not connected!');
    }

    return client;
}

/**
 * An async version of the the redis client get function
 * @return {RedisClient.get} The redis client get function as async
 */
export function redisGET(...args) {
    const client = getRedisClient();
    return promisify(client.get).bind(client)(...args);
}

/**
 * An async version of the the redis client get function
 * @return {RedisClient.set} The redis client set function as async
 */
export function redisSET(...args) {
    const client = getRedisClient();
    return promisify(client.set).bind(client)(...args);
}

/**
 * An async version of the the redis client get function
 * @return {RedisClient.incr} The redis client incr function as async
 */
export function redisINCR(...args) {
    // const client = getRedisClient();
    // return promisify(client.incr).bind(client)(...args);

    return new Promise((resolve, reject) => {
        getRedisClient().incr(...args, (err, reply) => {
            if (err) {
                reject(err);
            } else {
                resolve(reply);
            }
        });
    })
}

